import os
import sqlite3
from math import pi

# Database class for SQLite operations
class Database:
    def __init__(self, db_name="test.db"):
        self.connection = sqlite3.connect(db_name)
        self.cursor = self.connection.cursor()
        self.create_table()

    def create_table(self):
        self.cursor.execute('''CREATE TABLE IF NOT EXISTS users
                               (id INTEGER PRIMARY KEY, name TEXT, age INTEGER)''')
        self.connection.commit()

    def add_user(self, name, age):
        self.cursor.execute("INSERT INTO users (name, age) VALUES (?, ?)", (name, age))
        self.connection.commit()

    def get_users(self):
        self.cursor.execute("SELECT * FROM users")
        return self.cursor.fetchall()

    def update_user(self, user_id, name, age):
        self.cursor.execute("UPDATE users SET name = ?, age = ? WHERE id = ?", (name, age, user_id))
        self.connection.commit()

    def delete_user(self, user_id):
        self.cursor.execute("DELETE FROM users WHERE id = ?", (user_id,))
        self.connection.commit()

    def close(self):
        self.connection.close()


# Shape class hierarchy using OOP
class Shape:
    def area(self):
        raise NotImplementedError("Subclasses should implement this!")


class Circle(Shape):
    def __init__(self, radius):
        self.radius = radius

    def area(self):
        return pi * self.radius ** 2


class Rectangle(Shape):
    def __init__(self, width, height):
        self.width = width
        self.height = height

    def area(self):
        return self.width * self.height


# FileHandler class for file operations
class FileHandler:
    def __init__(self, file_name="data.txt"):
        self.file_name = file_name

    def write_to_file(self, data):
        with open(self.file_name, 'a') as file:
            file.write(f"{data}\n")

    def read_from_file(self):
        if os.path.exists(self.file_name):
            with open(self.file_name, 'r') as file:
                return file.readlines()
        else:
            return []

    def delete_file(self):
        if os.path.exists(self.file_name):
            os.remove(self.file_name)


# Calculator class for basic operations
class Calculator:
    def add(self, x, y):
        return x + y

    def subtract(self, x, y):
        return x - y

    def multiply(self, x, y):
        return x * y

    def divide(self, x, y):
        if y == 0:
            raise ValueError("Cannot divide by zero!")
        return x / y


# Main function to test the classes
def main():
    # Database operations
    db = Database()
    db.add_user("Alice", 30)
    db.add_user("Bob", 25)
    users = db.get_users()
    print("Users from DB:", users)
    db.update_user(1, "Alice Smith", 31)
    print("Updated Users:", db.get_users())
    db.delete_user(2)
    print("After Deletion:", db.get_users())
    db.close()

    # Shape operations
    circle = Circle(5)
    rectangle = Rectangle(4, 6)
    print("Circle Area:", circle.area())
    print("Rectangle Area:", rectangle.area())

    # File operations
    file_handler = FileHandler()
    file_handler.write_to_file("Hello, World!")
    file_handler.write_to_file("This is a test.")
    print("File Contents:", file_handler.read_from_file())
    file_handler.delete_file()

    # Calculator operations
    calculator = Calculator()
    print("Addition:", calculator.add(10, 5))
    print("Subtraction:", calculator.subtract(10, 5))
    print("Multiplication:", calculator.multiply(10, 5))
    print("Division:", calculator.divide(10, 5))


if __name__ == "__main__":
    main()
